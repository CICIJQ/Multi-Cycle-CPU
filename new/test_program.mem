000010B7    // LUI x1, 0x1          => 初始化寄存器 x1 = 0x00001000   | opcode: 0x37
23408093    // ADDI x1, x1, 0x234   => 初始化 x1 = 0x00001234         | opcode: 0x13
FFFF01B7    // LUI x3, 0xFFFF0      => x3 = 0xFFFF0000                | opcode: 0x37
0030E133    // OR x2, x1, x3        => x2 = 0xFFFF1234                | opcode: 0x33
40202023    // SW x2, 0x400(x0)     => Mem[0x400] = x2                | opcode: 0x23
40002203    // LW x4, 0x400(x0)     => x4 = Mem[0x400]                | opcode: 0x03
00410463    // BEQ x2, x4, +8       => 比较x2和x4（相等，跳过ADDI x5）| opcode: 0x63
00500293    // ADDI x5, x0, 5       => 被跳过（BEQ成功）              | opcode: 0x13
00208463    // BEQ x1, x2, +8       => 不跳转                         | opcode: 0x63
00500293    // ADDI x5, x0, 5       => x5 = 5                         | opcode: 0x13
000082B3    // ADD x5, x1, x0       => x5 = x1                        | opcode: 0x33
00000000    // 非法指令             => 非法指令，触发Cause[0]         | opcode: 0x00 (非法)
40320333    // SUB x6, x4, x3       => x6 = x4 - x3                   | opcode: 0x33
008003EF    // JAL x7, +8           => 跳过 ADDI x5                   | opcode: 0x6F
00600293    // ADDI x5, x0, 6       => 被跳过                         | opcode: 0x13
7FFF0437    // LUI x8, 0x7FFF0      => x8 = 0x7FFF0000                | opcode: 0x37
000104B7    // LUI x9, 0x00010      => x9 = 0x00010000                | opcode: 0x37
FFF48493    // ADDI x9, x9, -1      => x9 = 0x0000FFFF                | opcode: 0x13
00946433    // OR x8, x8, x9        => x8 = 0x7FFFFFFF                | opcode: 0x33
00100493    // ADDI x9, x0, 1       => x9 = 1                         | opcode: 0x13
00940533    // ADD x10, x8, x9      => 0x7FFFFFFF+1溢出，触发Cause[1] | opcode: 0x33
000015B7    // LUI x11, 0x00001     => x11 = 0x00001000               | opcode: 0x37
80058593    // ADDI x11, x11, -2048 => x11 = 0x00000800               | opcode: 0x13
00000513    // ADDI x10, x0, 0  (主程序结束)
00000073    // ECALL 停机

@000000C0   # 异常入口0x300 = 0xC0 * 4
0005A023    # SW x0, 0(x11)     清 Cause
000F8067    # JALR x0, x31, 0   返回异常发生后的下一条指令
